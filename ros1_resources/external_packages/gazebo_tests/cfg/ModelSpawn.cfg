#!/usr/bin/env python3
PACKAGE = "gazebo_tests"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("MODELNAME_",    str_t,    0, "model name of the box",  "test_model")
gen.add("MASS_", double_t, 0, "box mass",    1.0, 0,   100.0)
gen.add("IXYZ_", double_t, 0, "inertia ixx, iyy, izz terms",    0.01, 0,   0.1)
# gen.add("IXX_", double_t, 0, "inertia ixx",    0.01, 0,   0.1)
# gen.add("IYY_", double_t, 0, "inertia iyy",    0.01, 0,   0.1)
# gen.add("IZZ_", double_t, 0, "inertia izz",    0.01, 0,   0.1)
gen.add("SIZEX_", double_t, 0, "box size and collision X",    1.0, 0,   10.0)
gen.add("SIZEY_", double_t, 0, "box size and collision Y",    1.0, 0,   10.0)
gen.add("SIZEZ_", double_t, 0, "box size and collision Z",    1.0, 0,   10.0)
gen.add("RESTITUTION_COEFFICIENT_", double_t, 0, "bounce restitution coefficient",    1.0, 0,   1.0)
gen.add("THRESHOLD_", int_t, 0, "bounce threshold",    100000, 0,   1000000000)
gen.add("MU_", double_t, 0, "mu, Coefficient of friction",    1.0, 0,   1.0)
gen.add("MU2_", double_t, 0, "mu2, Second coefficient of friction",    1.0, 0,   1.0)
gen.add("FDIR1X_", int_t, 0, "fdir1 X, direction of mu1 in the collision local reference frame",    0, 0,   1)
gen.add("FDIR1Y_", int_t, 0, "fdir1 Y, direction of mu1 in the collision local reference frame",    0, 0,   1)
gen.add("FDIR1Z_", int_t, 0, "fdir1 Z, direction of mu1 in the collision local reference frame",    0, 0,   1)
gen.add("SLIP1_", double_t, 0, "slip1, force dependent slip direction 1",    0.0, 0,  1.0)
gen.add("SLIP2_", double_t, 0, "slip2, force dependent slip direction 2",    0.0, 0,  1.0)
gen.add("SOFT_CFM_", double_t, 0, "Soft constraint force mixing",    0.0, 0,  1.0)
gen.add("SOFT_ERP_", double_t, 0, "Soft error reduction parameter",    0.2, 0,  1.0)
gen.add("KP_", double_t, 0, "Dynamically stiffness-equivalent coefficient for contact joints",    1e+12, 0,  1000000000.0)
gen.add("KD_", double_t, 0, "Dynamically damping-equivalent coefficient for contact joints",    1.0, 0,  100000.0)
gen.add("MINDEPTH_", double_t, 0, "Minimum allowable depth before contact correction impulse is applied",    0.0, 0,  0.1)
gen.add("MAXVEL_", double_t, 0, "Maximum contact correction velocity truncation term",    0.01, 0,  1.0)
gen.add("VELDECAYLINEAR_", double_t, 0, "Velocity decay linear term",    0.0, 0,  1.0)
gen.add("VELDECAYANGULAR_", double_t, 0, "Velocity decay angular term",    0.0, 0,  1.0)

gen.add("click_to_spawn_model",   bool_t,   0, "Click here to spawn model",  False)

gen.add("DEGREESRAMP", double_t, 0, "Degrees of inclination of the ramp",    10.0, 0,  180.0)
gen.add("MURAMP_", double_t, 0, "mu, Coefficient of friction",    1.0, 0,   1.0)
gen.add("MU2RAMP_", double_t, 0, "mu2, Second coefficient of friction",    1.0, 0,   1.0)
gen.add("FDIR1XRAMP_", int_t, 0, "fdir1 X, direction of mu1 in the collision local reference frame",    0, 0,   1)
gen.add("FDIR1YRAMP_", int_t, 0, "fdir1 Y, direction of mu1 in the collision local reference frame",    0, 0,   1)
gen.add("FDIR1ZRAMP_", int_t, 0, "fdir1 Z, direction of mu1 in the collision local reference frame",    0, 0,   1)
gen.add("SLIP1RAMP_", double_t, 0, "slip1, force dependent slip direction 1",    0.0, 0,  1.0)
gen.add("SLIP2RAMP_", double_t, 0, "slip2, force dependent slip direction 2",    0.0, 0,  1.0)
gen.add("SOFT_CFMRAMP_", double_t, 0, "Soft constraint force mixing",    0.0, 0,  1.0)
gen.add("SOFT_ERPRAMP_", double_t, 0, "Soft error reduction parameter",    0.2, 0,  1.0)
gen.add("KPRAMP_", double_t, 0, "Dynamically stiffness-equivalent coefficient for contact joints",    1e+12, 0,  1000000000.0)
gen.add("KDRAMP_", double_t, 0, "Dynamically damping-equivalent coefficient for contact joints",    1.0, 0,  100000.0)
gen.add("MINDEPTHRAMP_", double_t, 0, "Minimum allowable depth before contact correction impulse is applied",    0.0, 0,  0.1)
gen.add("MAXVELRAMP_", double_t, 0, "Maximum contact correction velocity truncation term",    0.01, 0,  1.0)
gen.add("click_to_spawn_ramp",   bool_t,   0, "Click here to spawn ramp model",  False)

exit(gen.generate(PACKAGE, PACKAGE, "ModelSpawn"))